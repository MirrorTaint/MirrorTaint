{
    "java.lang.String": {
        "String(String original)": "original->$result",
        "String(char value[])": "value->$result",
        "String(char value[], int offset, int count)": "value->$result",
        "String(int[] codePoints, int offset, int count)": "codePoints->$result",
        "String(byte ascii[], int hibyte, int offset, int count)": "ascii->$result",
        "String(byte ascii[], int hibyte)": "ascii->$result",
        "String(byte bytes[], int offset, int length, String charsetName)": "bytes->$result",
        "String(byte bytes[], int offset, int length, Charset charset)": "bytes->$result",
        "String(byte bytes[], String charsetName)": "bytes->$result",
        "String(byte bytes[], Charset charset)": "bytes->$result",
        "String(byte bytes[], int offset, int length)": "bytes->$result",
        "String(byte bytes[])": "bytes->$result",
        "String(StringBuffer buffer)": "buffer->$result",
        "String(StringBuilder builder)": "builder->$result",
        "char charAt(int index)": "$this->$result",
        "int codePointAt(int index)": "$this->$result",
        "int codePointBefore(int index)": "$this->$result",
        "int codePointCount(int beginIndex, int endIndex)": "$this->$result",
        "int offsetByCodePoints(int index, int codePointOffset)": "$this->$result",
        "void getChars(int srcBegin, int srcEnd, char dst[], int dstBegin)": "$this->dst",
        "void getBytes(int srcBegin, int srcEnd, byte dst[], int dstBegin)": "$this->dst",
        "byte[] getBytes(String charsetName)": "$this->$result",
        "byte[] getBytes(Charset charset)": "$this->$result",
        "byte[] getBytes()": "$this->$result",
        "String substring(int beginIndex)": "$this->$result",
        "String substring(int beginIndex, int endIndex)": "$this->$result",
        "CharSequence subSequence(int beginIndex, int endIndex)": "$this->$result",
        "String concat(String str)": "$this->$result, str->$result",
        "String replace(char oldChar, char newChar)": "newChar->$result, $this->$result",
        "String replaceFirst(String regex, String replacement)": "replacement->$result, $this->$result",
        "String replaceAll(String regex, String replacement)": "replacement->$result, $this->$result",
        "String replace(CharSequence target, CharSequence replacement)": "replacement->$result, $this->$result",
        "String[] split(String regex, int limit)": "$this->$result[i]",
        "String[] split(String regex)": "$this->$result[i]",
        "static String join(CharSequence delimiter, CharSequence... elements)": "elements[i]->$result",
        "static String join(CharSequence delimiter, Iterable<? extends CharSequence> elements)": "TODO",
        "String toLowerCase(Locale locale)": "$this->$result",
        "String toLowerCase()": "$this->$result",
        "String toUpperCase(Locale locale)": "$this->$result",
        "String toUpperCase()": "$this->$result",
        "String trim()": "$this->$result",
        "String toString()": "$this->$result",
        "char[] toCharArray()": "$this->$result",
        "static String format(String format, Object... args)": "args[i]->$result",
        "static String format(Locale l, String format, Object... args)": "args[i]->$result",
        "static String valueOf(Object obj)": "obj->$result",
        "static String valueOf(char data[])": "data->$result",
        "static String valueOf(char data[], int offset, int count)": "data->$result",
        "static String copyValueOf(char data[], int offset, int count)": "data->$result",
        "static String copyValueOf(char data[])": "data->$result",
        "static String valueOf(boolean b)": "b->$result",
        "static String valueOf(char c)": "c->$result",
        "static String valueOf(int i)": "i->$result",
        "static String valueOf(long l)": "l->$result",
        "static String valueOf(float f)": "f->$result",
        "static String valueOf(double d)": "d->$result"
    },
    "java.lang.StringBuilder": {
        "StringBuilder(String str)": "str->$result",
        "StringBuilder(CharSequence seq)": "seq->$result",
        "StringBuilder append(Object obj)": "obj->$this",
        "StringBuilder append(String str)": "str->$this",
        "StringBuilder append(StringBuffer sb)": "sb->$this",
        "StringBuilder append(CharSequence s)": "s->$this",
        "StringBuilder append(CharSequence s, int start, int end)": "s->$this",
        "StringBuilder append(char[] str)": "str->$this",
        "StringBuilder append(char[] str, int offset, int len)": "str->$this",
        "StringBuilder append(boolean b)": "b->$this",
        "StringBuilder append(char c)": "c->$this",
        "StringBuilder append(int i)": "i->$this",
        "StringBuilder append(long lng)": "lng->$this",
        "StringBuilder append(float f)": "f->$this",
        "StringBuilder append(double d)": "d->$this",
        "StringBuilder appendCodePoint(int codePoint)": "codePoint->$this",
        "StringBuilder replace(int start, int end, String str)": "str->$this",
        "StringBuilder insert(int index, char[] str, int offset, int len)": "str->$this",
        "StringBuilder insert(int offset, Object obj)": "obj->$this",
        "StringBuilder insert(int offset, String str)": "str->$this",
        "StringBuilder insert(int offset, char[] str)": "str->$this",
        "StringBuilder insert(int dstOffset, CharSequence s)": "s->$this",
        "StringBuilder insert(int dstOffset, CharSequence s, int start, int end)": "s->$this",
        "StringBuilder insert(int offset, boolean b)": "b->$this",
        "StringBuilder insert(int offset, char c)": "c->$this",
        "StringBuilder insert(int offset, int i)": "i->$this",
        "StringBuilder insert(int offset, long l)": "l->$this",
        "StringBuilder insert(int offset, float f)": "f->$this",
        "StringBuilder insert(int offset, double d)": "d->$this",
        "StringBuilder reverse()": "$this->$result",
        "String toString()": "$this->$result"
    },
    "java.lang.StringBuffer": {
        "StringBuffer(String str)": "str->$result",
        "StringBuffer(CharSequence seq)": "seq->$result",
        "StringBuffer append(Object obj)": "obj->$this",
        "StringBuffer append(String str)": "str->$this",
        "StringBuffer append(StringBuffer sb)": "sb->$this",
        "StringBuffer append(CharSequence s)": "s->$this",
        "StringBuffer append(CharSequence s, int start, int end)": "s->$this",
        "StringBuffer append(char[] str)": "str->$this",
        "StringBuffer append(char[] str, int offset, int len)": "str->$this",
        "StringBuffer append(boolean b)": "b->$this",
        "StringBuffer append(char c)": "c->$this",
        "StringBuffer append(int i)": "i->$this",
        "StringBuffer append(long lng)": "lng->$this",
        "StringBuffer append(float f)": "f->$this",
        "StringBuffer append(double d)": "d->$this",
        "StringBuffer appendCodePoint(int codePoint)": "codePoint->$this",
        "StringBuffer replace(int start, int end, String str)": "str->$this",
        "StringBuffer insert(int index, char[] str, int offset, int len)": "str->$this",
        "StringBuffer insert(int offset, Object obj)": "obj->$this",
        "StringBuffer insert(int offset, String str)": "str->$this",
        "StringBuffer insert(int offset, char[] str)": "str->$this",
        "StringBuffer insert(int dstOffset, CharSequence s)": "s->$this",
        "StringBuffer insert(int dstOffset, CharSequence s, int start, int end)": "s->$this",
        "StringBuffer insert(int offset, boolean b)": "b->$this",
        "StringBuffer insert(int offset, char c)": "c->$this",
        "StringBuffer insert(int offset, int i)": "i->$this",
        "StringBuffer insert(int offset, long l)": "l->$this",
        "StringBuffer insert(int offset, float f)": "f->$this",
        "StringBuffer insert(int offset, double d)": "d->$this",
        "StringBuffer reverse()": "$this->$result",
        "String toString()": "$this->$result"
    },
    "java.util.Date": {
        "Date(long date)": "date->$result",
        "Date(int year, int month, int date)": "year->$result, month->$result, date->$result",
        "Date(int year, int month, int date, int hrs, int min)": "year->$result, month->$result, date->$result, hrs->$result, min->$result",
        "Date(int year, int month, int date, int hrs, int min, int sec)": "year->$result, month->$result, date->$result, hrs->$result, min->$result, sec->$result",
        "Date(String s)": "s->$result",
        "Object clone()": "$this->$result",
        "static long UTC(int year, int month, int date, int hrs, int min, int sec)": "year->$result, month->$result, date->$result, hrs->$result, min->$result, sec->$result",
        "static long parse(String s)": "s->$result",
        "int getYear()": "$this->$result",
        "void setYear(int year)": "year->$this",
        "int getMonth()": "$this->$result",
        "void setMonth(int month)": "month->$this",
        "int getDate()": "$this->$result",
        "void setDate(int date)": "date->$this",
        "int getDay()": "$this->$result",
        "int getHours()": "$this->$result",
        "void setHours(int hours)": "hours->$this",
        "int getMinutes()": "$this->$result",
        "void setMinutes(int minutes)": "minutes->$this",
        "int getSeconds()": "$this->$result",
        "void setSeconds(int seconds)": "seconds->$this",
        "long getTime()": "$this->$result",
        "void setTime(long time)": "time->$this",
        "static long getMillisOf(Date date)": "date->$result",
        "String toString()": "$this->$result",
        "String toLocaleString()": "$this->$result",
        "String toGMTString()": "$this->$result",
        "int getTimezoneOffset()": "$this->$result",
        "static Date from(Instant instant)": "instant->$result",
        "Instant toInstant()": "$this->$result"
    },
    "java.text.DateFormat": {
        "StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition fieldPosition)": "obj->$result",
        "StringBuffer format(Date date, StringBuffer toAppendTo, FieldPosition fieldPosition)": "date->$result",
        "String format(Date date)": "date->$result",
        "Date parse(String source)": "source->$result",
        "Date parse(String source, ParsePosition pos)": "source->$result",
        "Object parseObject(String source, ParsePosition pos)": "source->$result"
    },
    "java.text.SimpleDateFormat": {
        "StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition fieldPosition)": "obj->$result",
        "StringBuffer format(Date date, StringBuffer toAppendTo, FieldPosition fieldPosition)": "date->$result",
        "String format(Date date)": "date->$result",
        "Date parse(String source)": "source->$result",
        "Date parse(String source, ParsePosition pos)": "source->$result",
        "Object parseObject(String source, ParsePosition pos)": "source->$result"
    },
    "java.math.BigDecimal": {
        "BigDecimal(char[] in, int offset, int len)": "in->$result",
        "BigDecimal(char[] in, int offset, int len, MathContext mc)": "in->$result",
        "BigDecimal(char[] in)": "in->$result",
        "BigDecimal(char[] in, MathContext mc)": "in->$result",
        "BigDecimal(String val)": "val->$result",
        "BigDecimal(String val, MathContext mc)": "val->$result",
        "BigDecimal(double val)": "val->$result",
        "BigDecimal(double val, MathContext mc)": "val->$result",
        "BigDecimal(BigInteger val)": "val->$result",
        "BigDecimal(BigInteger val, MathContext mc)": "val->$result",
        "BigDecimal(BigInteger unscaledVal, int scale)": "unscaledVal->$result",
        "BigDecimal(BigInteger unscaledVal, int scale, MathContext mc)": "unscaledVal->$result",
        "BigDecimal(int val)": "val->$result",
        "BigDecimal(int val, MathContext mc)": "val->$result",
        "BigDecimal(long val)": "val->$result",
        "BigDecimal(long val, MathContext mc)": "val->$result",
        "static BigDecimal valueOf(long unscaledVal, int scale)": "unscaledVal->$result",
        "static BigDecimal valueOf(long val)": "val->$result",
        "static BigDecimal valueOf(double val)": "val->$result",
        "BigDecimal add(BigDecimal augend)": "augend->$result, $this->$result",
        "BigDecimal add(BigDecimal augend, MathContext mc)": "augend->$result, $this->$result",
        "BigDecimal subtract(BigDecimal subtrahend)": "subtrahend->$result, $this->$result",
        "BigDecimal subtract(BigDecimal subtrahend, MathContext mc)": "subtrahend->$result, $this->$result",
        "BigDecimal multiply(BigDecimal multiplicand)": "multiplicand->$result, $this->$result",
        "BigDecimal multiply(BigDecimal multiplicand, MathContext mc)": "multiplicand->$result, $this->$result",
        "BigDecimal divide(BigDecimal divisor, int scale, int roundingMode)": "divisor->$result, $this->$result",
        "BigDecimal divide(BigDecimal divisor, int scale, RoundingMode roundingMode)": "divisor->$result, $this->$result",
        "BigDecimal divide(BigDecimal divisor, int roundingMode)": "divisor->$result, $this->$result",
        "BigDecimal divide(BigDecimal divisor, RoundingMode roundingMode)": "divisor->$result, $this->$result",
        "BigDecimal divide(BigDecimal divisor)": "divisor->$result, $this->$result",
        "BigDecimal divide(BigDecimal divisor, MathContext mc)": "divisor->$result, $this->$result",
        "BigDecimal divideToIntegralValue(BigDecimal divisor)": "divisor->$result, $this->$result",
        "BigDecimal divideToIntegralValue(BigDecimal divisor, MathContext mc)": "divisor->$result, $this->$result",
        "BigDecimal remainder(BigDecimal divisor)": "divisor->$result, $this->$result",
        "BigDecimal remainder(BigDecimal divisor, MathContext mc)": "divisor->$result, $this->$result",
        "BigDecimal[] divideAndRemainder(BigDecimal divisor)": "divisor->$result[0], divisor->$result[1], $this->$result[0], $this->$result[1]",
        "BigDecimal[] divideAndRemainder(BigDecimal divisor, MathContext mc)": "divisor->$result[0], divisor->$result[1], $this->$result[0], $this->$result[1]",
        "BigDecimal pow(int n)": "$this->$result, n->$result",
        "BigDecimal pow(int n, MathContext mc)": "$this->$result, n->$result",
        "BigDecimal abs()": "$this->$result",
        "BigDecimal abs(MathContext mc)": "$this->$result",
        "BigDecimal negate()": "$this->$result",
        "BigDecimal negate(MathContext mc)": "$this->$result",
        "BigDecimal plus()": "$this->$result",
        "BigDecimal plus(MathContext mc)": "$this->$result",
        "BigInteger unscaledValue()": "$this->$result",
        "BigDecimal round(MathContext mc)": "$this->$result",
        "BigDecimal setScale(int newScale, RoundingMode roundingMode)": "$this->$result",
        "BigDecimal setScale(int newScale, int roundingMode)": "$this->$result",
        "BigDecimal setScale(int newScale)": "$this->$result",
        "BigDecimal movePointLeft(int n)": "$this->$result, n->$result",
        "BigDecimal movePointRight(int n)": "$this->$result, n->$result",
        "BigDecimal scaleByPowerOfTen(int n)": "$this->$result, n->$result",
        "BigDecimal stripTrailingZeros()": "$this->$result",
        "String toString()": "$this->$result",
        "String toEngineeringString()": "$this->$result",
        "String toPlainString()": "$this->$result",
        "BigInteger toBigInteger()": "$this->$result",
        "BigInteger toBigIntegerExact()": "$this->$result",
        "long longValue()": "$this->$result",
        "long longValueExact()": "$this->$result",
        "int intValue()": "$this->$result",
        "int intValueExact()": "$this->$result",
        "short shortValueExact()": "$this->$result",
        "byte byteValueExact()": "$this->$result",
        "float floatValue()": "$this->$result",
        "double doubleValue()": "$this->$result",
        "BigDecimal ulp()": "$this->$result"
    }
}